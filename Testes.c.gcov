        -:    0:Source:Testes.c
        -:    0:Graph:Testes.gcno
        -:    0:Data:Testes.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "minunit.h"
        -:    5:#include "soccer.h"
        -:    6:#include "equipe.h"
        -:    7:#include "escalacaoTest.h"
        -:    8:#include <time.h>
        -:    9:#include <stdbool.h>
        -:   10:
        -:   11:#define MAX_LINE_SIZE 100
        -:   12:#include <math.h> // Inclua a biblioteca math.h para usar a função fabs
        -:   13:
        -:   14:#define TOLERANCE 0.01 // Defina a tolerância desejada
        -:   15:
        -:   16:Quatro_quatro_dois quatro_quatro_dois;
        -:   17:Quatro_tres_tres quatro_tres_tres;
        -:   18:Tres_quatro_tres tres_quatro_tres;
        -:   19:
        -:   20:Time meuTime;
        -:   21:
       10:   22:void leArquivo(char *nomeArquivo)
        -:   23:{
        -:   24:    FILE *arquivo;
        -:   25:    char linha[100];
       10:   26:    int i = 0;
       10:   27:    arquivo = fopen(nomeArquivo, "r");
       10:   28:    if (arquivo == NULL)
        -:   29:    {
    #####:   30:        printf("Erro ao abrir o arquivo");
    #####:   31:        exit(1);
        -:   32:    }
        -:   33:    // Lê cada linha do arquivo e divide em campos separados por ';'
       10:   34:    int contador = 0;
        -:   35:    Jogador jogadores[25]; // Cria um vetor de jogadores para armazenar os dados
      238:   36:    while (fgets(linha, MAX_LINE_SIZE, arquivo) != NULL && contador <= 24)
        -:   37:    {
        -:   38:        /* This code is reading a line from a file and splitting it into fields separated by semicolons.
        -:   39:        The `strtok` function is used to split the line into tokens, which are then stored in the
        -:   40:        `jogadores` array of `struct Jogador`. */
        -:   41:
        -:   42:        char *token;
      218:   43:        token = strtok(linha, ";");
      218:   44:        strcpy(jogadores[i].nome, token);
        -:   45:
      218:   46:        token = strtok(NULL, ";");
      218:   47:        strcpy(jogadores[i].posicao, token);
        -:   48:
        -:   49:        //  usando a função strtok(). A primeira chamada de strtok() é feita com a variável linha como primeiro argumento e ; como segundo argumento.
        -:   50:
      218:   51:        token = strtok(NULL, ";");
      218:   52:        jogadores[i].tatica = atoi(token);
        -:   53:
      218:   54:        token = strtok(NULL, ";");
      218:   55:        jogadores[i].tecnica = atoi(token);
        -:   56:
      218:   57:        token = strtok(NULL, ";");
      218:   58:        jogadores[i].fisico = atoi(token);
        -:   59:
      218:   60:        i++;
        -:   61:    }
       10:   62:    fclose(arquivo);
        -:   63:
      228:   64:    for (int j = 0; j < i; j++)
        -:   65:    {
      218:   66:        meuTime.jogadores[j] = jogadores[j]; // adiciona o jogador ao vetor de jogadores do Time
        -:   67:    }
       10:   68:}
        -:   69:
        -:   70:// Teste para a função leArquivo
        1:   71:MU_TEST(test_leArquivo)
        -:   72:{
        -:   73:    // Cria um arquivo temporário com dados fictícios
        1:   74:    FILE *arquivo = fopen("temp.txt", "wb");
        1:   75:    if (arquivo == NULL)
        -:   76:    {
    #####:   77:        mu_fail("Erro ao criar arquivo temporário");
        -:   78:        return;
        -:   79:    }
        -:   80:
        1:   81:    fprintf(arquivo, "Jogador1;A;4;5;3\n");
        1:   82:    fprintf(arquivo, "Jogador2;Z;3;4;5\n");
        1:   83:    fclose(arquivo);
        -:   84:
        1:   85:    leArquivo("temp.txt");
        -:   86:
        -:   87:    // Testa se os jogadores foram lidos corretamente
        1:   88:    mu_assert_string_eq("Jogador1", meuTime.jogadores[0].nome);
        1:   89:    mu_assert_string_eq("A", meuTime.jogadores[0].posicao);
        1:   90:    mu_assert_int_eq(4, meuTime.jogadores[0].tatica);
        1:   91:    mu_assert_int_eq(5, meuTime.jogadores[0].tecnica);
        1:   92:    mu_assert_int_eq(3, meuTime.jogadores[0].fisico);
        -:   93:
        1:   94:    mu_assert_string_eq("Jogador2", meuTime.jogadores[1].nome);
        1:   95:    mu_assert_string_eq("Z", meuTime.jogadores[1].posicao);
        1:   96:    mu_assert_int_eq(3, meuTime.jogadores[1].tatica);
        1:   97:    mu_assert_int_eq(4, meuTime.jogadores[1].tecnica);
        1:   98:    mu_assert_int_eq(5, meuTime.jogadores[1].fisico);
        -:   99:
        -:  100:    // Remove o arquivo temporário
        1:  101:    remove("temp.txt");
        -:  102:}
        -:  103:
        -:  104:// metodo de salvar o arquivo
        1:  105:void salvarArquivo(char *nomeArquivo, Time meuTime)
        -:  106:{
        -:  107:    FILE *arquivo;
        1:  108:    arquivo = fopen(nomeArquivo, "w");
        1:  109:    if (arquivo == NULL)
        -:  110:    {
    #####:  111:        printf("Erro ao abrir o arquivo.\n");
    #####:  112:        return;
        -:  113:    }
       26:  114:    for (int i = 0; i < 25; i++)
        -:  115:    {
       25:  116:        fprintf(arquivo, "%s;%s;%d;%d;%d\n", meuTime.jogadores[i].nome, meuTime.jogadores[i].posicao,
        -:  117:                meuTime.jogadores[i].tecnica, meuTime.jogadores[i].fisico, meuTime.jogadores[i].tatica);
        -:  118:    }
        1:  119:    fclose(arquivo);
        1:  120:    printf("Arquivo salvo com sucesso.\n");
        -:  121:}
        -:  122:
        -:  123://----------------------------------------------//
        -:  124:
        1:  125:float calcular_medias(Jogador *jogadores, int num_jogadores, Time *meuTime)
        -:  126:{
        1:  127:    float soma_tatica = 0, soma_tecnica = 0, soma_fisico = 0, soma_defesa = 0, soma_ataque = 0;
        1:  128:    float a = 0.5, b = 0.3, c = 0.2, d = 0.4, e = 0.5, f = 0.1; // valores iniciais das constantes
        -:  129:
       26:  130:    for (int i = 0; i < num_jogadores; i++)
        -:  131:    {
       25:  132:        soma_tatica += jogadores[i].tatica;
       25:  133:        soma_tecnica += jogadores[i].tecnica;
       25:  134:        soma_fisico += jogadores[i].fisico;
        -:  135:    }
        -:  136:
        1:  137:    meuTime->defesa = (a * soma_tatica) + (b * soma_tecnica) + (c * soma_fisico);
        1:  138:    meuTime->ataque = (d * soma_tatica) + (e * soma_tecnica) + (f * soma_fisico);
        -:  139:
        1:  140:    printf("Defesa: %.2f\n", meuTime->defesa);
        1:  141:    printf("Ataque: %.2f\n", meuTime->ataque);
        -:  142:
        1:  143:    return meuTime->defesa, meuTime->ataque;
        -:  144:}
        -:  145:
    #####:  146:void imprime_jogadores(Jogador *jogadores, int num_jogadores)
        -:  147:{
    #####:  148:    for (int i = 0; i < num_jogadores; i++)
        -:  149:    {
    #####:  150:        printf("Nome: %s\n", jogadores[i].nome);
    #####:  151:        printf("Posicao: %s\n", jogadores[i].posicao);
    #####:  152:        printf("Tatica: %d\n", jogadores[i].tatica);
    #####:  153:        printf("Tecnica: %d\n", jogadores[i].tecnica);
    #####:  154:        printf("Fisico: %d\n\n", jogadores[i].fisico);
        -:  155:    }
    #####:  156:}
        -:  157:// Função para treinar a técnica de todos os jogadores
        1:  158:void treinar_tecnica(Time *meuTime)
        -:  159:{
       26:  160:    for (int i = 0; i < 25; i++)
        -:  161:    {
       25:  162:        if (meuTime->jogadores[i].tecnica < 10)
        -:  163:        { // verifica se a técnica é menor que 10
       22:  164:            meuTime->jogadores[i].tecnica++;
        -:  165:        }
        -:  166:    }
        1:  167:}
        -:  168:
        -:  169:// Função para treinar a tática de todos os jogadores
        1:  170:void treinar_tatica(Time *meuTime)
        -:  171:{
       26:  172:    for (int i = 0; i < 25; i++)
        -:  173:    {
       25:  174:        if (meuTime->jogadores[i].tatica < 10)
        -:  175:        { // verifica se a tática é menor que 10
       22:  176:            meuTime->jogadores[i].tatica++;
        -:  177:        }
        -:  178:    }
        1:  179:}
        -:  180:
        -:  181:// Função para treinar o físico de todos os jogadores
        1:  182:void treinar_fisico(Time *meuTime)
        -:  183:{
       26:  184:    for (int i = 0; i < 25; i++)
        -:  185:    {
       25:  186:        if (meuTime->jogadores[i].fisico < 10)
        -:  187:        { // verifica se o físico é menor que 10
       25:  188:            meuTime->jogadores[i].fisico++;
        -:  189:        }
        -:  190:    }
        1:  191:}
        -:  192:
        4:  193:void escalacao(Time meuTime, int escolha)
        -:  194:{
        -:  195:    // printf("Escalações disponíveis: \n");
        -:  196:    // printf("1 - 4-4-2 \n");
        -:  197:    // printf("2 - 4-3-3 \n");
        -:  198:    // printf("3 - 3-4-3 \n");
        -:  199:    // printf("Escolha a escalação do seu time: \n");
        -:  200:
        -:  201:    // scanf("%d", &escolha);
        4:  202:    int contadorAtacante = 0;
        4:  203:    int contadorZagueiro = 0;
        4:  204:    int contadorMeio = 0;
        4:  205:    int numZagueiros = 0;
        4:  206:    int numMeio = 0;
        4:  207:    int numAtacantes = 0;
        4:  208:    int numReserva = 0;
        4:  209:    int numGoleiro = 0;
        4:  210:    int contadorGoleiro = 0;
        4:  211:    switch (escolha)
        -:  212:    {
        -:  213:    case 1:
        -:  214:
        2:  215:        printf("Você escolheu a escalaçAo 4-4-2 \n");
        -:  216:
       52:  217:        for (int i = 0; i < 25; i++)
        -:  218:        {
       50:  219:            Jogador jogador = meuTime.jogadores[i];
       50:  220:            if (strcmp(jogador.posicao, "A") == 0)
        -:  221:            {
        6:  222:                contadorAtacante++;
        -:  223:            }
       50:  224:            if (strcmp(jogador.posicao, "Z") == 0)
        -:  225:            {
        6:  226:                contadorZagueiro++;
        -:  227:            }
       50:  228:            if (strcmp(jogador.posicao, "M") == 0)
        -:  229:            {
        -:  230:
       10:  231:                contadorMeio++;
        -:  232:            }
       50:  233:            if (strcmp(jogador.posicao, "G") == 0)
        -:  234:            {
        -:  235:
        2:  236:                contadorGoleiro++;
        -:  237:            }
        -:  238:        }
        5:  239:        while (contadorAtacante > 2)
        -:  240:        {
        1:  241:            int atacante1 = -1, atacante2 = -1;
        3:  242:            while (atacante1 == atacante2)
        -:  243:            {
        1:  244:                srand(time(NULL));
        1:  245:                atacante1 = rand() % contadorAtacante;
        1:  246:                atacante2 = rand() % contadorAtacante;
        -:  247:            }
        1:  248:            printf("Atacantes escolhidos:\n");
       26:  249:            for (int i = 0; i < 25; i++)
        -:  250:            {
       25:  251:                Jogador jogador = meuTime.jogadores[i];
       25:  252:                if (strcmp(jogador.posicao, "A") == 0)
        -:  253:                {
        6:  254:                    if (atacante1 == 0 || atacante2 == 0)
        -:  255:                    {
        2:  256:                        printf("- %s\n", jogador.nome);
        2:  257:                        if (atacante1 == 0)
        -:  258:                        {
        1:  259:                            quatro_quatro_dois.atacantes[0] = jogador;
        -:  260:                        }
        -:  261:                        else
        -:  262:                        {
        1:  263:                            quatro_quatro_dois.atacantes[1] = jogador;
        -:  264:                        }
        2:  265:                        numAtacantes++;
        -:  266:                    }
        4:  267:                    else if (numReserva < contadorAtacante)
        -:  268:                    {
        4:  269:                        printf("- %s (Reserva)\n", jogador.nome);
        4:  270:                        quatro_quatro_dois.reserva[numReserva] = jogador;
        4:  271:                        numReserva++;
        -:  272:                    }
        6:  273:                    atacante1--;
        6:  274:                    atacante2--;
        -:  275:                }
        -:  276:            }
        1:  277:            contadorAtacante = 2;
        -:  278:        }
        5:  279:        while (contadorZagueiro > 2 && numZagueiros < 4)
        -:  280:        {
        1:  281:            int zagueiro1 = -1, zagueiro2 = -1, zagueiro3 = -1, zagueiro4 = -1;
128911574:  282:            while (zagueiro1 == zagueiro2 || zagueiro1 == zagueiro3 || zagueiro1 == zagueiro4 || zagueiro2 == zagueiro3 || zagueiro2 == zagueiro4 || zagueiro3 == zagueiro4)
        -:  283:            {
128911572:  284:                srand(time(NULL));
128911572:  285:                zagueiro1 = rand() % contadorZagueiro;
128911572:  286:                zagueiro2 = rand() % contadorZagueiro;
128911572:  287:                zagueiro3 = rand() % contadorZagueiro;
128911572:  288:                zagueiro4 = rand() % contadorZagueiro;
        -:  289:            }
        1:  290:            printf("Zagueiros escolhidos:\n");
       26:  291:            for (int i = 0; i < 25; i++)
        -:  292:            {
       25:  293:                Jogador jogador = meuTime.jogadores[i];
       25:  294:                if (strcmp(jogador.posicao, "Z") == 0)
        -:  295:                {
        6:  296:                    if (zagueiro1 == 0 || zagueiro2 == 0 || zagueiro3 == 0 || zagueiro4 == 0)
        -:  297:                    {
        4:  298:                        printf("- %s\n", jogador.nome);
        4:  299:                        if (zagueiro1 == 0)
        -:  300:                        {
        1:  301:                            quatro_quatro_dois.defensores[0] = jogador;
        -:  302:                        }
        3:  303:                        else if (zagueiro2 == 0)
        -:  304:                        {
        1:  305:                            quatro_quatro_dois.defensores[1] = jogador;
        -:  306:                        }
        2:  307:                        else if (zagueiro3 == 0)
        -:  308:                        {
        1:  309:                            quatro_quatro_dois.defensores[2] = jogador;
        -:  310:                        }
        1:  311:                        else if (zagueiro4 == 0)
        -:  312:                        {
        1:  313:                            quatro_quatro_dois.defensores[3] = jogador;
        -:  314:                        }
        -:  315:
        4:  316:                        numZagueiros++;
        -:  317:                    }
        2:  318:                    else if (numReserva < contadorZagueiro)
        -:  319:                    {
        2:  320:                        printf("- %s (Reserva)\n", jogador.nome);
        2:  321:                        quatro_quatro_dois.reserva[numReserva] = jogador;
        2:  322:                        numReserva++;
        -:  323:                    }
        6:  324:                    zagueiro1--;
        6:  325:                    zagueiro2--;
        6:  326:                    zagueiro3--;
        6:  327:                    zagueiro4--;
        -:  328:                }
        -:  329:            }
        1:  330:            contadorZagueiro = 4;
        -:  331:        }
        -:  332:
        5:  333:        while (contadorMeio > 2 && numMeio < 4)
        -:  334:        {
        1:  335:            int meio1 = -1, meio2 = -1, meio3 = -1, meio4 = -1;
 42728064:  336:            while (meio1 == meio2 || meio1 == meio3 || meio1 == meio4 || meio2 == meio3 || meio2 == meio4 || meio3 == meio4)
        -:  337:            {
 42728062:  338:                srand(time(NULL));
 42728062:  339:                meio1 = rand() % contadorMeio;
 42728062:  340:                meio2 = rand() % contadorMeio;
 42728062:  341:                meio3 = rand() % contadorMeio;
 42728062:  342:                meio4 = rand() % contadorMeio;
        -:  343:            }
        1:  344:            printf("Meio escolhidos:\n");
       26:  345:            for (int i = 0; i < 25; i++)
        -:  346:            {
       25:  347:                Jogador jogador = meuTime.jogadores[i];
       25:  348:                if (strcmp(jogador.posicao, "M") == 0)
        -:  349:                {
       10:  350:                    if (meio1 == 0 || meio2 == 0 || meio3 == 0 || meio4 == 0)
        -:  351:                    {
        4:  352:                        printf("- %s\n", jogador.nome);
        4:  353:                        if (meio1 == 0)
        -:  354:                        {
        1:  355:                            quatro_quatro_dois.meio_campo[0] = jogador;
        -:  356:                        }
        3:  357:                        else if (meio2 == 0)
        -:  358:                        {
        1:  359:                            quatro_quatro_dois.meio_campo[1] = jogador;
        -:  360:                        }
        2:  361:                        else if (meio3 == 0)
        -:  362:                        {
        1:  363:                            quatro_quatro_dois.meio_campo[2] = jogador;
        -:  364:                        }
        1:  365:                        else if (meio4 == 0)
        -:  366:                        {
        1:  367:                            quatro_quatro_dois.meio_campo[3] = jogador;
        -:  368:                        }
        4:  369:                        numMeio++;
        -:  370:                    }
        6:  371:                    else if (numReserva < contadorMeio)
        -:  372:                    {
        4:  373:                        printf("- %s (Reserva)\n", jogador.nome);
        4:  374:                        quatro_quatro_dois.reserva[numReserva] = jogador;
        4:  375:                        numReserva++;
        -:  376:                    }
       10:  377:                    meio1--;
       10:  378:                    meio2--;
       10:  379:                    meio3--;
       10:  380:                    meio4--;
        -:  381:                }
        -:  382:            }
        1:  383:            contadorMeio = 4;
        -:  384:        }
        -:  385:
        5:  386:        while (contadorGoleiro > 0 && numGoleiro == 0)
        -:  387:        {
        1:  388:            int goleiro1 = -1;
        3:  389:            while (goleiro1 == -1)
        -:  390:            {
        1:  391:                srand(time(NULL));
        1:  392:                goleiro1 = rand() % contadorGoleiro;
        -:  393:            }
        1:  394:            printf("Goleiro escolhido:\n");
       26:  395:            for (int i = 0; i < 25; i++)
        -:  396:            {
       25:  397:                Jogador jogador = meuTime.jogadores[i];
       25:  398:                if (strcmp(jogador.posicao, "G") == 0)
        -:  399:                {
        2:  400:                    if (goleiro1 == 0)
        -:  401:                    {
        1:  402:                        printf("- %s\n", jogador.nome);
        1:  403:                        quatro_quatro_dois.goleiro = jogador;
        1:  404:                        numGoleiro++;
        -:  405:                    }
        1:  406:                    else if (numReserva < 4)
        -:  407:                    {
    #####:  408:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  409:                        quatro_quatro_dois.reserva[numReserva] = jogador;
    #####:  410:                        numReserva++;
        -:  411:                    }
        2:  412:                    goleiro1--;
        -:  413:                }
        -:  414:            }
        1:  415:            contadorGoleiro = 1;
        -:  416:        }
        2:  417:        break;
        -:  418:
        -:  419:    case 2:
        1:  420:        printf("Voce escolheu a Escalaçao 4-3-3\n");
        -:  421:
       26:  422:        for (int i = 0; i < 25; i++)
        -:  423:        {
       25:  424:            Jogador jogador = meuTime.jogadores[i];
       25:  425:            if (strcmp(jogador.posicao, "A") == 0)
        -:  426:            {
    #####:  427:                contadorAtacante++;
        -:  428:            }
       25:  429:            if (strcmp(jogador.posicao, "Z") == 0)
        -:  430:            {
    #####:  431:                contadorZagueiro++;
        -:  432:            }
       25:  433:            if (strcmp(jogador.posicao, "M") == 0)
        -:  434:            {
        -:  435:
    #####:  436:                contadorMeio++;
        -:  437:            }
       25:  438:            if (strcmp(jogador.posicao, "G") == 0)
        -:  439:            {
    #####:  440:                contadorGoleiro++;
        -:  441:            }
        -:  442:        }
        -:  443:
        2:  444:        while (contadorAtacante > 3)
        -:  445:        {
    #####:  446:            int atacante1 = -1, atacante2 = -1, atacante3 = -1;
    #####:  447:            while (atacante1 == atacante2 || atacante1 == atacante3 || atacante2 == atacante3)
        -:  448:            {
    #####:  449:                srand(time(NULL));
    #####:  450:                atacante1 = rand() % contadorAtacante;
    #####:  451:                atacante2 = rand() % contadorAtacante;
    #####:  452:                atacante3 = rand() % contadorAtacante;
        -:  453:            }
    #####:  454:            printf("Atacantes escolhidos:\n");
    #####:  455:            for (int i = 0; i < 25; i++)
        -:  456:            {
    #####:  457:                Jogador jogador = meuTime.jogadores[i];
    #####:  458:                if (strcmp(jogador.posicao, "A") == 0)
        -:  459:                {
    #####:  460:                    if (atacante1 == 0 || atacante2 == 0 || atacante3 == 0)
        -:  461:                    {
    #####:  462:                        printf("- %s\n", jogador.nome);
        -:  463:
    #####:  464:                        if (atacante1 == 0)
        -:  465:                        {
    #####:  466:                            quatro_tres_tres.atacantes[0] = jogador;
        -:  467:                        }
    #####:  468:                        else if (atacante2 == 0)
        -:  469:                        {
    #####:  470:                            quatro_tres_tres.atacantes[1] = jogador;
        -:  471:                        }
    #####:  472:                        else if (atacante3 == 0)
        -:  473:                        {
    #####:  474:                            quatro_tres_tres.atacantes[2] = jogador;
        -:  475:                        }
    #####:  476:                        numAtacantes++;
        -:  477:                    }
    #####:  478:                    else if (numReserva < 4)
        -:  479:                    {
    #####:  480:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  481:                        quatro_tres_tres.reserva[numReserva] = jogador;
    #####:  482:                        numReserva++;
        -:  483:                    }
    #####:  484:                    atacante1--;
    #####:  485:                    atacante2--;
    #####:  486:                    atacante3--;
        -:  487:                }
        -:  488:            }
    #####:  489:            contadorAtacante = 3; // Sai do loop while
        -:  490:        }
        2:  491:        while (contadorZagueiro > 2 && numZagueiros < 4) // Executa no máximo 4 vezes
        -:  492:        {
    #####:  493:            int zagueiro1 = -1, zagueiro2 = -1, zagueiro3 = -1, zagueiro4 = -1;
    #####:  494:            while (zagueiro1 == zagueiro2 || zagueiro1 == zagueiro3 || zagueiro1 == zagueiro4 || zagueiro2 == zagueiro3 || zagueiro2 == zagueiro4 || zagueiro3 == zagueiro4)
        -:  495:            {
    #####:  496:                srand(time(NULL));
    #####:  497:                zagueiro1 = rand() % contadorZagueiro;
    #####:  498:                zagueiro2 = rand() % contadorZagueiro;
    #####:  499:                zagueiro3 = rand() % contadorZagueiro;
    #####:  500:                zagueiro4 = rand() % contadorZagueiro;
        -:  501:            }
    #####:  502:            printf("Zagueiros escolhidos:\n");
    #####:  503:            for (int i = 0; i < 25; i++)
        -:  504:            {
    #####:  505:                Jogador jogador = meuTime.jogadores[i];
    #####:  506:                if (strcmp(jogador.posicao, "Z") == 0)
        -:  507:                {
    #####:  508:                    if (zagueiro1 == 0 || zagueiro2 == 0 || zagueiro3 == 0 || zagueiro4 == 0)
        -:  509:                    {
    #####:  510:                        printf("- %s\n", jogador.nome);
        -:  511:
    #####:  512:                        if (zagueiro1 == 0)
        -:  513:                        {
    #####:  514:                            quatro_tres_tres.defensores[0] = jogador;
        -:  515:                        }
    #####:  516:                        else if (zagueiro2 == 0)
        -:  517:                        {
    #####:  518:                            quatro_tres_tres.defensores[1] = jogador;
        -:  519:                        }
    #####:  520:                        else if (zagueiro3 == 0)
        -:  521:                        {
    #####:  522:                            quatro_tres_tres.defensores[2] = jogador;
        -:  523:                        }
    #####:  524:                        else if (zagueiro4 == 0)
        -:  525:                        {
    #####:  526:                            quatro_tres_tres.defensores[3] = jogador;
        -:  527:                        }
    #####:  528:                        numZagueiros++;
        -:  529:                    }
    #####:  530:                    else if (numReserva < 4)
        -:  531:                    {
    #####:  532:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  533:                        quatro_tres_tres.reserva[numReserva] = jogador;
    #####:  534:                        numReserva++;
        -:  535:                    }
    #####:  536:                    zagueiro1--;
    #####:  537:                    zagueiro2--;
    #####:  538:                    zagueiro3--;
    #####:  539:                    zagueiro4--;
        -:  540:                }
        -:  541:            }
    #####:  542:            contadorZagueiro = 4;
        -:  543:        }
        -:  544:
        2:  545:        while (contadorMeio > 2 && numMeio < 3)
        -:  546:        {
    #####:  547:            int meio1 = -1, meio2 = -1, meio3 = -1;
    #####:  548:            while (meio1 == meio2 || meio1 == meio3 || meio2 == meio3)
        -:  549:            {
    #####:  550:                srand(time(NULL));
    #####:  551:                meio1 = rand() % contadorMeio;
    #####:  552:                meio2 = rand() % contadorMeio;
    #####:  553:                meio3 = rand() % contadorMeio;
        -:  554:            }
    #####:  555:            printf("Meio escolhidos:\n");
    #####:  556:            for (int i = 0; i < 25; i++)
        -:  557:            {
    #####:  558:                Jogador jogador = meuTime.jogadores[i];
    #####:  559:                if (strcmp(jogador.posicao, "M") == 0)
        -:  560:                {
    #####:  561:                    if (meio1 == 0 || meio2 == 0 || meio3 == 0)
        -:  562:                    {
    #####:  563:                        printf("- %s\n", jogador.nome);
        -:  564:
    #####:  565:                        if (meio1 == 0)
        -:  566:                        {
    #####:  567:                            quatro_tres_tres.meio_campo[0] = jogador;
        -:  568:                        }
    #####:  569:                        else if (meio2 == 0)
        -:  570:                        {
    #####:  571:                            quatro_tres_tres.meio_campo[1] = jogador;
        -:  572:                        }
    #####:  573:                        else if (meio3 == 0)
        -:  574:                        {
    #####:  575:                            quatro_tres_tres.meio_campo[2] = jogador;
        -:  576:                        }
        -:  577:
    #####:  578:                        numMeio++;
        -:  579:                    }
    #####:  580:                    else if (numReserva < 4)
        -:  581:                    {
    #####:  582:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  583:                        quatro_tres_tres.reserva[numReserva] = jogador;
    #####:  584:                        numReserva++;
        -:  585:                    }
    #####:  586:                    meio1--;
    #####:  587:                    meio2--;
    #####:  588:                    meio3--;
        -:  589:                }
        -:  590:            }
    #####:  591:            contadorMeio = 3;
        -:  592:        }
        -:  593:
        2:  594:        while (contadorGoleiro > 0 && numGoleiro == 0)
        -:  595:        {
    #####:  596:            int goleiro1 = -1;
    #####:  597:            while (goleiro1 == -1)
        -:  598:            {
    #####:  599:                srand(time(NULL));
    #####:  600:                goleiro1 = rand() % contadorGoleiro;
        -:  601:            }
    #####:  602:            printf("Goleiro escolhido:\n");
    #####:  603:            for (int i = 0; i < 25; i++)
        -:  604:            {
    #####:  605:                Jogador jogador = meuTime.jogadores[i];
    #####:  606:                if (strcmp(jogador.posicao, "G") == 0)
        -:  607:                {
    #####:  608:                    if (goleiro1 == 0)
        -:  609:                    {
    #####:  610:                        printf("- %s\n", jogador.nome);
    #####:  611:                        quatro_tres_tres.goleiro = jogador;
    #####:  612:                        numGoleiro++;
        -:  613:                    }
    #####:  614:                    else if (numReserva < 4)
        -:  615:                    {
    #####:  616:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  617:                        quatro_tres_tres.reserva[numReserva] = jogador;
    #####:  618:                        numReserva++;
        -:  619:                    }
    #####:  620:                    goleiro1--;
        -:  621:                }
        -:  622:            }
    #####:  623:            contadorGoleiro = 1;
        -:  624:        }
        -:  625:
        1:  626:        break;
        -:  627:
        -:  628:    case 3:
        1:  629:        printf("Voce escolheu a Escalaçao 3-4-3\n");
        -:  630:
       26:  631:        for (int i = 0; i < 25; i++)
        -:  632:        {
       25:  633:            Jogador jogador = meuTime.jogadores[i];
       25:  634:            if (strcmp(jogador.posicao, "A") == 0)
        -:  635:            {
    #####:  636:                contadorAtacante++;
        -:  637:            }
       25:  638:            if (strcmp(jogador.posicao, "Z") == 0)
        -:  639:            {
    #####:  640:                contadorZagueiro++;
        -:  641:            }
       25:  642:            if (strcmp(jogador.posicao, "M") == 0)
        -:  643:            {
    #####:  644:                contadorMeio++;
        -:  645:            }
       25:  646:            if (strcmp(jogador.posicao, "G") == 0)
        -:  647:            {
    #####:  648:                contadorGoleiro++;
        -:  649:            }
        -:  650:        }
        -:  651:
        2:  652:        while (contadorAtacante > 3)
        -:  653:        {
    #####:  654:            int atacante1 = -1, atacante2 = -1, atacante3 = -1;
    #####:  655:            while (atacante1 == atacante2 || atacante1 == atacante3 || atacante2 == atacante3)
        -:  656:            {
    #####:  657:                srand(time(NULL));
    #####:  658:                atacante1 = rand() % contadorAtacante;
    #####:  659:                atacante2 = rand() % contadorAtacante;
    #####:  660:                atacante3 = rand() % contadorAtacante;
        -:  661:            }
    #####:  662:            printf("Atacantes escolhidos:\n");
    #####:  663:            for (int i = 0; i < 25; i++)
        -:  664:            {
    #####:  665:                Jogador jogador = meuTime.jogadores[i];
    #####:  666:                if (strcmp(jogador.posicao, "A") == 0)
        -:  667:                {
    #####:  668:                    if (atacante1 == 0 || atacante2 == 0 || atacante3 == 0)
        -:  669:                    {
    #####:  670:                        printf("- %s\n", jogador.nome);
        -:  671:
    #####:  672:                        if (atacante1 == 0)
        -:  673:                        {
    #####:  674:                            tres_quatro_tres.atacantes[0] = jogador;
        -:  675:                        }
    #####:  676:                        else if (atacante2 == 0)
        -:  677:                        {
    #####:  678:                            tres_quatro_tres.atacantes[1] = jogador;
        -:  679:                        }
    #####:  680:                        else if (atacante3 == 0)
        -:  681:                        {
    #####:  682:                            tres_quatro_tres.atacantes[2] = jogador;
        -:  683:                        }
        -:  684:
    #####:  685:                        numAtacantes++;
        -:  686:                    }
    #####:  687:                    else if (numReserva < 4)
        -:  688:                    {
    #####:  689:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  690:                        tres_quatro_tres.reserva[numReserva] = jogador;
    #####:  691:                        numReserva++;
        -:  692:                    }
    #####:  693:                    atacante1--;
    #####:  694:                    atacante2--;
    #####:  695:                    atacante3--;
        -:  696:                }
        -:  697:            }
    #####:  698:            contadorAtacante = 3;
        -:  699:        }
        1:  700:        while (contadorZagueiro > 2 && numZagueiros < 4)
        -:  701:        {
    #####:  702:            int zagueiro1 = -1, zagueiro2 = -1, zagueiro3 = -1;
    #####:  703:            while (zagueiro1 == zagueiro2 || zagueiro1 == zagueiro3 || zagueiro2 == zagueiro3)
        -:  704:            {
    #####:  705:                srand(time(NULL));
    #####:  706:                zagueiro1 = rand() % contadorZagueiro;
    #####:  707:                zagueiro2 = rand() % contadorZagueiro;
    #####:  708:                zagueiro3 = rand() % contadorZagueiro;
        -:  709:            }
        -:  710:
    #####:  711:            printf("Zagueiros escolhidos:\n");
    #####:  712:            for (int i = 0; i < 25; i++)
        -:  713:            {
    #####:  714:                Jogador jogador = meuTime.jogadores[i];
    #####:  715:                if (strcmp(jogador.posicao, "Z") == 0)
        -:  716:                {
    #####:  717:                    if (zagueiro1 == 0 || zagueiro2 == 0 || zagueiro3 == 0)
        -:  718:                    {
    #####:  719:                        printf("- %s\n", jogador.nome);
        -:  720:
    #####:  721:                        if (zagueiro1 == 0)
        -:  722:                        {
    #####:  723:                            tres_quatro_tres.defensores[0] = jogador;
        -:  724:                        }
    #####:  725:                        else if (zagueiro2 == 0)
        -:  726:                        {
    #####:  727:                            tres_quatro_tres.defensores[1] = jogador;
        -:  728:                        }
    #####:  729:                        else if (zagueiro3 == 0)
        -:  730:                        {
    #####:  731:                            tres_quatro_tres.defensores[2] = jogador;
        -:  732:                        }
        -:  733:
    #####:  734:                        numZagueiros++;
        -:  735:                    }
    #####:  736:                    else if (numReserva < 4)
        -:  737:                    {
    #####:  738:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  739:                        tres_quatro_tres.reserva[numReserva] = jogador;
    #####:  740:                        numReserva++;
        -:  741:                    }
    #####:  742:                    zagueiro1--;
    #####:  743:                    zagueiro2--;
    #####:  744:                    zagueiro3--;
        -:  745:                }
    #####:  746:                contadorZagueiro = 3;
        -:  747:            }
        -:  748:
    #####:  749:            while (contadorMeio > 2 && numMeio < 4)
        -:  750:            {
    #####:  751:                int meio1 = -1, meio2 = -1, meio3 = -1, meio4 = -1;
    #####:  752:                while (meio1 == meio2 || meio1 == meio3 || meio1 == meio4 || meio2 == meio3 || meio2 == meio4 || meio3 == meio4)
        -:  753:                {
    #####:  754:                    srand(time(NULL));
    #####:  755:                    meio1 = rand() % contadorMeio;
    #####:  756:                    meio2 = rand() % contadorMeio;
    #####:  757:                    meio3 = rand() % contadorMeio;
    #####:  758:                    meio4 = rand() % contadorMeio;
        -:  759:                }
    #####:  760:                printf("Meio escolhidos:\n");
    #####:  761:                for (int i = 0; i < 25; i++)
        -:  762:                {
    #####:  763:                    Jogador jogador = meuTime.jogadores[i];
    #####:  764:                    if (strcmp(jogador.posicao, "M") == 0)
        -:  765:                    {
    #####:  766:                        if (meio1 == 0 || meio2 == 0 || meio3 == 0 || meio4 == 0)
        -:  767:                        {
    #####:  768:                            printf("- %s\n", jogador.nome);
        -:  769:
    #####:  770:                            if (meio1 == 0)
        -:  771:                            {
    #####:  772:                                tres_quatro_tres.meio_campo[0] = jogador;
        -:  773:                            }
    #####:  774:                            else if (meio2 == 0)
        -:  775:                            {
    #####:  776:                                tres_quatro_tres.meio_campo[1] = jogador;
        -:  777:                            }
    #####:  778:                            else if (meio3 == 0)
        -:  779:                            {
    #####:  780:                                tres_quatro_tres.meio_campo[2] = jogador;
        -:  781:                            }
    #####:  782:                            else if (meio4 == 0)
        -:  783:                            {
    #####:  784:                                tres_quatro_tres.meio_campo[3] = jogador;
        -:  785:                            }
    #####:  786:                            numMeio++;
        -:  787:                        }
    #####:  788:                        meio1--;
    #####:  789:                        meio2--;
    #####:  790:                        meio3--;
    #####:  791:                        meio4--;
        -:  792:                    }
    #####:  793:                    else if (numReserva < 4)
        -:  794:                    {
    #####:  795:                        printf("- %s (Reserva)\n", jogador.nome);
    #####:  796:                        tres_quatro_tres.reserva[numReserva] = jogador;
    #####:  797:                        numReserva++;
        -:  798:                    }
        -:  799:                }
    #####:  800:                contadorMeio = 4;
        -:  801:            }
    #####:  802:            while (contadorGoleiro > 0 && numGoleiro == 0)
        -:  803:            {
    #####:  804:                int goleiro1 = -1;
    #####:  805:                while (goleiro1 == -1)
        -:  806:                {
    #####:  807:                    srand(time(NULL));
    #####:  808:                    goleiro1 = rand() % contadorGoleiro;
        -:  809:                }
    #####:  810:                printf("Goleiro escolhido:\n");
    #####:  811:                for (int i = 0; i < 25; i++)
        -:  812:                {
    #####:  813:                    Jogador jogador = meuTime.jogadores[i];
    #####:  814:                    if (strcmp(jogador.posicao, "G") == 0)
        -:  815:                    {
    #####:  816:                        if (goleiro1 == 0)
        -:  817:                        {
    #####:  818:                            printf("- %s\n", jogador.nome);
    #####:  819:                            tres_quatro_tres.goleiro = jogador;
    #####:  820:                            numGoleiro++;
        -:  821:                        }
    #####:  822:                        else if (numReserva < 4)
        -:  823:                        {
    #####:  824:                            printf("- %s (Reserva)\n", jogador.nome);
    #####:  825:                            tres_quatro_tres.reserva[numReserva] = jogador;
    #####:  826:                            numReserva++;
        -:  827:                        }
    #####:  828:                        goleiro1--;
        -:  829:                    }
        -:  830:                }
    #####:  831:                contadorGoleiro = 1;
        -:  832:            }
        -:  833:
    #####:  834:            break;
        -:  835:
        -:  836:        default:
    #####:  837:            printf("Opção inválida\n");
    #####:  838:            break;
        -:  839:        }
        -:  840:    }
        4:  841:}
        -:  842:
    #####:  843:void mostra442(Quatro_quatro_dois quatro_quatro_dois)
        -:  844:{
    #####:  845:    printf("4-4-2:\n");
    #####:  846:    printf("Atacantes:\n");
    #####:  847:    for (int i = 0; i < 2; i++)
        -:  848:    {
    #####:  849:        printf("- %s\n", quatro_quatro_dois.atacantes[i].nome);
        -:  850:    }
    #####:  851:    printf("Meio-campistas:\n");
    #####:  852:    for (int i = 0; i < 4; i++)
        -:  853:    {
    #####:  854:        printf("- %s\n", quatro_quatro_dois.meio_campo[i].nome);
        -:  855:    }
    #####:  856:    printf("Zagueiros:\n");
    #####:  857:    for (int i = 0; i < 4; i++)
        -:  858:    {
    #####:  859:        printf("- %s\n", quatro_quatro_dois.defensores[i].nome);
        -:  860:    }
        -:  861:
    #####:  862:    printf("Goleiro:\n");
    #####:  863:    for (int i = 0; i < 1; i++)
        -:  864:    {
    #####:  865:        printf("- %s\n", quatro_quatro_dois.goleiro.nome);
        -:  866:    }
        -:  867:
    #####:  868:    printf("Reservas:\n");
    #####:  869:    for (int i = 0; i < 11; i++)
        -:  870:    {
    #####:  871:        printf("- %s\n", quatro_quatro_dois.reserva[i].nome);
        -:  872:    }
    #####:  873:}
        -:  874:
    #####:  875:void mostra433(Quatro_tres_tres quatro_tres_tres)
        -:  876:{
    #####:  877:    printf("4-3-3:\n");
    #####:  878:    printf("Atacantes:\n");
    #####:  879:    for (int i = 0; i < 3; i++)
        -:  880:    {
    #####:  881:        printf("- %s\n", quatro_tres_tres.atacantes[i].nome);
        -:  882:    }
    #####:  883:    printf("Meio-campistas:\n");
    #####:  884:    for (int i = 0; i < 3; i++)
        -:  885:    {
    #####:  886:        printf("- %s\n", quatro_tres_tres.meio_campo[i].nome);
        -:  887:    }
    #####:  888:    printf("Zagueiros:\n");
    #####:  889:    for (int i = 0; i < 4; i++)
        -:  890:    {
    #####:  891:        printf("- %s\n", quatro_tres_tres.defensores[i].nome);
        -:  892:    }
    #####:  893:    printf("Goleiro:\n");
    #####:  894:    for (int i = 0; i < 1; i++)
        -:  895:    {
    #####:  896:        printf("- %s\n", quatro_quatro_dois.goleiro.nome);
        -:  897:    }
        -:  898:
    #####:  899:    printf("Reservas:\n");
    #####:  900:    for (int i = 0; i < 11; i++)
        -:  901:    {
    #####:  902:        printf("- %s\n", quatro_quatro_dois.reserva[i].nome);
        -:  903:        if (quatro_tres_tres.reserva[i].nome == NULL)
        -:  904:        {
        -:  905:            break;
        -:  906:        }
        -:  907:    }
    #####:  908:}
        -:  909:
    #####:  910:void mostra343(Tres_quatro_tres tres_quatro_tres)
        -:  911:{
    #####:  912:    printf("3-4-3:\n");
    #####:  913:    printf("Atancates:\n");
    #####:  914:    for (int i = 0; i < 3; i++)
        -:  915:    {
    #####:  916:        printf("- %s\n", tres_quatro_tres.atacantes[i].nome);
        -:  917:    }
    #####:  918:    printf("Meio-campistas:\n");
    #####:  919:    for (int i = 0; i < 4; i++)
        -:  920:    {
    #####:  921:        printf("- %s\n", tres_quatro_tres.meio_campo[i].nome);
        -:  922:    }
    #####:  923:    printf("Zagueiros:\n");
    #####:  924:    for (int i = 0; i < 3; i++)
        -:  925:    {
    #####:  926:        printf("- %s\n", tres_quatro_tres.defensores[i].nome);
        -:  927:    }
    #####:  928:    printf("Goleiro:\n");
    #####:  929:    for (int i = 0; i < 1; i++)
        -:  930:    {
    #####:  931:        printf("- %s\n", quatro_quatro_dois.goleiro.nome);
        -:  932:    }
        -:  933:
    #####:  934:    printf("Reservas:\n");
    #####:  935:    for (int i = 0; i < 4; i++)
        -:  936:    {
    #####:  937:        printf("- %s\n", quatro_quatro_dois.reserva[i].nome);
        -:  938:        if (tres_quatro_tres.reserva[i].nome == NULL)
        -:  939:        {
        -:  940:            break;
        -:  941:        }
        -:  942:    }
    #####:  943:}
        -:  944:
        -:  945:Time time3;
        -:  946:Time time4;
        -:  947:Time time2 = {"Joinville", 120.0, 130.2, {}};
        -:  948:
        -:  949:void chanceGol442(Quatro_quatro_dois quatro_quatro_dois);
        -:  950:void chanceGol433(Quatro_tres_tres quatro_tres_tres);
        -:  951:void chanceGol343(Tres_quatro_tres tres_quatro_tres);
        -:  952:
    #####:  953:void chanceGol442(Quatro_quatro_dois quatro_quatro_dois)
        -:  954:{
    #####:  955:    int jogadorEscolhido = rand() % 3; // Escolhe um índice aleatório entre 0 e 2
        -:  956:
    #####:  957:    float pesoAtacante = 1.0;
    #####:  958:    float pesoMeioCampo = 0.8;
    #####:  959:    float pesoZagueiro = 0.6;
    #####:  960:    float chanceMarcaGol = 0.0;
    #####:  961:    int golFeito = 0;
        -:  962:
    #####:  963:    int numJogadoresEscolhidos = 0;
        -:  964:    int jogadoresEscolhidos[11];
        -:  965:
    #####:  966:    for (int i = 0; i < 11; i++)
        -:  967:    {
    #####:  968:        float pesoJogador = 0.0;
        -:  969:
    #####:  970:        if (strcmp(quatro_quatro_dois.atacantes[i].posicao, "A") == 0)
    #####:  971:            pesoJogador = pesoAtacante;
    #####:  972:        else if (strcmp(quatro_quatro_dois.meio_campo[i].posicao, "M") == 0)
    #####:  973:            pesoJogador = pesoMeioCampo;
    #####:  974:        else if (strcmp(quatro_quatro_dois.defensores[i].posicao, "Z") == 0)
    #####:  975:            pesoJogador = pesoZagueiro;
        -:  976:
    #####:  977:        chanceMarcaGol = (quatro_quatro_dois.atacantes[i].tecnica * pesoJogador) +
    #####:  978:                         (quatro_quatro_dois.meio_campo[i].tecnica * pesoMeioCampo) +
    #####:  979:                         (quatro_quatro_dois.defensores[i].tecnica * pesoZagueiro) +
    #####:  980:                         (quatro_quatro_dois.goleiro.tecnica * 0.1);
        -:  981:
    #####:  982:        if (i == jogadorEscolhido && golFeito == 0)
        -:  983:        {
    #####:  984:            jogadoresEscolhidos[numJogadoresEscolhidos] = i;
    #####:  985:            numJogadoresEscolhidos++;
        -:  986:        }
        -:  987:    }
        -:  988:
    #####:  989:    if (numJogadoresEscolhidos > 0 && golFeito == 0)
        -:  990:    {
    #####:  991:        int jogadorGol = jogadoresEscolhidos[rand() % numJogadoresEscolhidos];
        -:  992:
    #####:  993:        if (strcmp(quatro_quatro_dois.meio_campo[jogadorGol].posicao, "M") == 0 ||
    #####:  994:            strcmp(quatro_quatro_dois.defensores[jogadorGol].posicao, "Z") == 0 || strcmp(quatro_quatro_dois.atacantes[jogadorGol].posicao, "A") == 0)
        -:  995:
        -:  996:        {
    #####:  997:            if (strcmp(quatro_quatro_dois.meio_campo[jogadorGol].posicao, "M") == 0)
    #####:  998:                printf("%s (Meio-campista) fez o gol!\n", quatro_quatro_dois.meio_campo[jogadorGol].nome);
    #####:  999:            if (strcmp(quatro_quatro_dois.defensores[jogadorGol].posicao, "Z") == 0)
    #####: 1000:                printf("%s (Defensor) fez o gol!\n", quatro_quatro_dois.defensores[jogadorGol].nome);
    #####: 1001:            if (strcmp(quatro_quatro_dois.atacantes[jogadorGol].posicao, "A") == 0)
    #####: 1002:                printf("%s (Atacante) fez o gol!\n", quatro_quatro_dois.atacantes[jogadorGol].nome);
        -: 1003:
    #####: 1004:            golFeito = 1;
        -: 1005:        }
        -: 1006:    }
    #####: 1007:}
        -: 1008:
    #####: 1009:void chanceGol433(Quatro_tres_tres quatro_tres_tres)
        -: 1010:{
    #####: 1011:    int jogadorEscolhido = rand() % 3; // Escolhe um índice aleatório entre 0 e 2
        -: 1012:
    #####: 1013:    float pesoAtacante = 1.0;
    #####: 1014:    float pesoMeioCampo = 0.8;
    #####: 1015:    float pesoZagueiro = 0.6;
    #####: 1016:    float chanceMarcaGol = 0.0;
    #####: 1017:    int golFeito = 0;
        -: 1018:
    #####: 1019:    int numJogadoresEscolhidos = 0;
        -: 1020:    int jogadoresEscolhidos[11];
        -: 1021:
    #####: 1022:    for (int i = 0; i < 11; i++)
        -: 1023:    {
    #####: 1024:        float pesoJogador = 0.0;
        -: 1025:
    #####: 1026:        if (strcmp(quatro_tres_tres.atacantes[i].posicao, "A") == 0)
    #####: 1027:            pesoJogador = pesoAtacante;
    #####: 1028:        else if (strcmp(quatro_tres_tres.meio_campo[i].posicao, "M") == 0)
    #####: 1029:            pesoJogador = pesoMeioCampo;
    #####: 1030:        else if (strcmp(quatro_tres_tres.defensores[i].posicao, "Z") == 0)
    #####: 1031:            pesoJogador = pesoZagueiro;
        -: 1032:
    #####: 1033:        chanceMarcaGol = (quatro_tres_tres.atacantes[i].tecnica * pesoJogador) +
    #####: 1034:                         (quatro_tres_tres.meio_campo[i].tecnica * pesoMeioCampo) +
    #####: 1035:                         (quatro_tres_tres.defensores[i].tecnica * pesoZagueiro) +
    #####: 1036:                         (quatro_tres_tres.goleiro.tecnica * 0.1);
        -: 1037:
    #####: 1038:        if (i == jogadorEscolhido && golFeito == 0)
        -: 1039:        {
    #####: 1040:            jogadoresEscolhidos[numJogadoresEscolhidos] = i;
    #####: 1041:            numJogadoresEscolhidos++;
        -: 1042:        }
        -: 1043:    }
        -: 1044:
    #####: 1045:    if (numJogadoresEscolhidos > 0 && golFeito == 0)
        -: 1046:    {
    #####: 1047:        int jogadorGol = jogadoresEscolhidos[rand() % numJogadoresEscolhidos];
        -: 1048:
    #####: 1049:        if (strcmp(quatro_tres_tres.meio_campo[jogadorGol].posicao, "M") == 0 ||
    #####: 1050:            strcmp(quatro_tres_tres.defensores[jogadorGol].posicao, "Z") == 0 || strcmp(quatro_tres_tres.atacantes[jogadorGol].posicao, "A") == 0)
        -: 1051:
        -: 1052:        {
    #####: 1053:            if (strcmp(quatro_tres_tres.meio_campo[jogadorGol].posicao, "M") == 0)
    #####: 1054:                printf("%s (Meio-campista) fez o gol!\n", quatro_tres_tres.meio_campo[jogadorGol].nome);
    #####: 1055:            if (strcmp(quatro_tres_tres.defensores[jogadorGol].posicao, "Z") == 0)
    #####: 1056:                printf("%s (Defensor) fez o gol!\n", quatro_tres_tres.defensores[jogadorGol].nome);
    #####: 1057:            if (strcmp(quatro_tres_tres.atacantes[jogadorGol].posicao, "A") == 0)
    #####: 1058:                printf("%s (Atacante) fez o gol!\n", quatro_tres_tres.atacantes[jogadorGol].nome);
        -: 1059:
    #####: 1060:            golFeito = 1;
        -: 1061:        }
        -: 1062:    }
    #####: 1063:}
    #####: 1064:void chanceGol343(Tres_quatro_tres tres_quatro_tres)
        -: 1065:{
    #####: 1066:    int jogadorEscolhido = rand() % 3; // Escolhe um índice aleatório entre 0 e 2
        -: 1067:
    #####: 1068:    float pesoAtacante = 1.0;
    #####: 1069:    float pesoMeioCampo = 0.8;
    #####: 1070:    float pesoZagueiro = 0.6;
    #####: 1071:    float chanceMarcaGol = 0.0;
    #####: 1072:    int golFeito = 0;
        -: 1073:
    #####: 1074:    int numJogadoresEscolhidos = 0;
        -: 1075:    int jogadoresEscolhidos[11];
        -: 1076:
    #####: 1077:    for (int i = 0; i < 11; i++)
        -: 1078:    {
    #####: 1079:        float pesoJogador = 0.0;
        -: 1080:
    #####: 1081:        if (strcmp(tres_quatro_tres.atacantes[i].posicao, "A") == 0)
    #####: 1082:            pesoJogador = pesoAtacante;
    #####: 1083:        else if (strcmp(tres_quatro_tres.meio_campo[i].posicao, "M") == 0)
    #####: 1084:            pesoJogador = pesoMeioCampo;
    #####: 1085:        else if (strcmp(tres_quatro_tres.defensores[i].posicao, "Z") == 0)
    #####: 1086:            pesoJogador = pesoZagueiro;
        -: 1087:
    #####: 1088:        chanceMarcaGol = (tres_quatro_tres.atacantes[i].tecnica * pesoJogador) +
    #####: 1089:                         (tres_quatro_tres.meio_campo[i].tecnica * pesoMeioCampo) +
    #####: 1090:                         (tres_quatro_tres.defensores[i].tecnica * pesoZagueiro) +
    #####: 1091:                         (tres_quatro_tres.goleiro.tecnica * 0.1);
        -: 1092:
    #####: 1093:        if (i == jogadorEscolhido && golFeito == 0)
        -: 1094:        {
    #####: 1095:            jogadoresEscolhidos[numJogadoresEscolhidos] = i;
    #####: 1096:            numJogadoresEscolhidos++;
        -: 1097:        }
        -: 1098:    }
        -: 1099:
    #####: 1100:    if (numJogadoresEscolhidos > 0 && golFeito == 0)
        -: 1101:    {
    #####: 1102:        int jogadorGol = jogadoresEscolhidos[rand() % numJogadoresEscolhidos];
        -: 1103:
    #####: 1104:        if (strcmp(tres_quatro_tres.meio_campo[jogadorGol].posicao, "M") == 0 ||
    #####: 1105:            strcmp(tres_quatro_tres.defensores[jogadorGol].posicao, "Z") == 0 || strcmp(tres_quatro_tres.atacantes[jogadorGol].posicao, "A") == 0)
        -: 1106:
        -: 1107:        {
    #####: 1108:            if (strcmp(tres_quatro_tres.meio_campo[jogadorGol].posicao, "M") == 0)
    #####: 1109:                printf("%s (Meio-campista) fez o gol!\n", tres_quatro_tres.meio_campo[jogadorGol].nome);
    #####: 1110:            if (strcmp(tres_quatro_tres.defensores[jogadorGol].posicao, "Z") == 0)
    #####: 1111:                printf("%s (Defensor) fez o gol!\n", tres_quatro_tres.defensores[jogadorGol].nome);
    #####: 1112:            if (strcmp(tres_quatro_tres.atacantes[jogadorGol].posicao, "A") == 0)
    #####: 1113:                printf("%s (Atacante) fez o gol!\n", tres_quatro_tres.atacantes[jogadorGol].nome);
        -: 1114:
    #####: 1115:            golFeito = 1;
        -: 1116:        }
        -: 1117:    }
    #####: 1118:}
        -: 1119:
        1: 1120:int jogo2pt1(Time meuTime, Time timeAdversario)
        -: 1121:{
        1: 1122:    int i = 0;
        1: 1123:    int golsTime3 = 0, golsTime4 = 0;
        -: 1124:
        1: 1125:    float pesoZero = 0.7;
        1: 1126:    float pesoUm = 0.8;
        1: 1127:    float pesoDois = 0.8;
        1: 1128:    float pesoTres = 0.7;
        1: 1129:    float pesoQuatro = 0.4;
        1: 1130:    float pesoCinco = 0.3;
        1: 1131:    float pesoSeis = 0.2;
        1: 1132:    float pesoSete = 0.1;
        1: 1133:    float pesoOito = 0.1;
        -: 1134:
        1: 1135:    srand((unsigned int)time(NULL));
        -: 1136:
        1: 1137:    int numGolsTime3 = (int)(rand() % 7);
        1: 1138:    float golsPonderadosTime3 = 0.0;
        1: 1139:    switch (numGolsTime3)
        -: 1140:    {
        -: 1141:    case 0:
    #####: 1142:        golsPonderadosTime3 = pesoZero;
    #####: 1143:        break;
        -: 1144:    case 1:
    #####: 1145:        golsPonderadosTime3 = pesoUm;
    #####: 1146:        break;
        -: 1147:    case 2:
    #####: 1148:        golsPonderadosTime3 = pesoDois;
    #####: 1149:        break;
        -: 1150:    case 3:
    #####: 1151:        golsPonderadosTime3 = pesoTres;
    #####: 1152:        break;
        -: 1153:    case 4:
    #####: 1154:        golsPonderadosTime3 = pesoQuatro;
    #####: 1155:        break;
        -: 1156:    case 5:
        1: 1157:        golsPonderadosTime3 = pesoCinco;
        1: 1158:        break;
        -: 1159:    case 6:
    #####: 1160:        golsPonderadosTime3 = pesoSeis;
    #####: 1161:        break;
        -: 1162:    }
        1: 1163:    golsTime3 = (int)(golsPonderadosTime3 * 6);
        -: 1164:
        1: 1165:    int numGolsTime4 = (int)(rand() % 7);
        1: 1166:    float golsPonderadosTime4 = 0.0;
        1: 1167:    switch (numGolsTime4)
        -: 1168:    {
        -: 1169:    case 0:
    #####: 1170:        golsPonderadosTime4 = pesoZero;
    #####: 1171:        break;
        -: 1172:    case 1:
        1: 1173:        golsPonderadosTime4 = pesoUm;
        1: 1174:        break;
        -: 1175:    case 2:
    #####: 1176:        golsPonderadosTime4 = pesoDois;
    #####: 1177:        break;
        -: 1178:    case 3:
    #####: 1179:        golsPonderadosTime4 = pesoTres;
    #####: 1180:        break;
        -: 1181:    case 4:
    #####: 1182:        golsPonderadosTime4 = pesoQuatro;
    #####: 1183:        break;
        -: 1184:    case 5:
    #####: 1185:        golsPonderadosTime4 = pesoCinco;
    #####: 1186:        break;
        -: 1187:    case 6:
    #####: 1188:        golsPonderadosTime4 = pesoSeis;
    #####: 1189:        break;
        -: 1190:    }
        1: 1191:    golsTime4 = (int)(golsPonderadosTime4 * 6);
        -: 1192:
        1: 1193:    printf("Jogo 2");
        1: 1194:    printf("Fim Primeiro Tempo: Time3 %d x %d Time 4 \n", golsTime3, golsTime4);
        -: 1195:
        1: 1196:    return golsTime3, golsTime4;
        -: 1197:}
        -: 1198:
    #####: 1199:void segundoTempo(Time time3, Time time4, int *golsTime3, int *golsTime4)
        -: 1200:{
    #####: 1201:    float pesoZero = 0.7;
    #####: 1202:    float pesoUm = 0.8;
    #####: 1203:    float pesoDois = 0.8;
    #####: 1204:    float pesoTres = 0.7;
    #####: 1205:    float pesoQuatro = 0.4;
    #####: 1206:    float pesoCinco = 0.3;
    #####: 1207:    float pesoSeis = 0.2;
        -: 1208:
    #####: 1209:    srand((unsigned int)time(NULL));
        -: 1210:
    #####: 1211:    int numGolsTime3SegTempo = (int)(rand() % 7);
    #####: 1212:    float golsPonderadosTime3SegTempo = 0.0;
    #####: 1213:    switch (numGolsTime3SegTempo)
        -: 1214:    {
        -: 1215:    case 0:
    #####: 1216:        golsPonderadosTime3SegTempo = pesoZero;
    #####: 1217:        break;
        -: 1218:    case 1:
    #####: 1219:        golsPonderadosTime3SegTempo = pesoUm;
    #####: 1220:        break;
        -: 1221:    case 2:
    #####: 1222:        golsPonderadosTime3SegTempo = pesoDois;
    #####: 1223:        break;
        -: 1224:    case 3:
    #####: 1225:        golsPonderadosTime3SegTempo = pesoTres;
    #####: 1226:        break;
        -: 1227:    case 4:
    #####: 1228:        golsPonderadosTime3SegTempo = pesoQuatro;
    #####: 1229:        break;
        -: 1230:    case 5:
    #####: 1231:        golsPonderadosTime3SegTempo = pesoCinco;
    #####: 1232:        break;
        -: 1233:    case 6:
    #####: 1234:        golsPonderadosTime3SegTempo = pesoSeis;
    #####: 1235:        break;
        -: 1236:    }
    #####: 1237:    int golsTime3SegTempo = (int)(golsPonderadosTime3SegTempo * 6);
        -: 1238:
    #####: 1239:    int numGolsTime4SegTempo = (int)(rand() % 7);
    #####: 1240:    float golsPonderadosTime4SegTempo = 0.0;
    #####: 1241:    switch (numGolsTime4SegTempo)
        -: 1242:    {
        -: 1243:    case 0:
    #####: 1244:        golsPonderadosTime4SegTempo = pesoZero;
    #####: 1245:        break;
        -: 1246:    case 1:
    #####: 1247:        golsPonderadosTime4SegTempo = pesoUm;
    #####: 1248:        break;
        -: 1249:    case 2:
    #####: 1250:        golsPonderadosTime4SegTempo = pesoDois;
    #####: 1251:        break;
        -: 1252:    case 3:
    #####: 1253:        golsPonderadosTime4SegTempo = pesoTres;
    #####: 1254:        break;
        -: 1255:    case 4:
    #####: 1256:        golsPonderadosTime4SegTempo = pesoQuatro;
    #####: 1257:        break;
        -: 1258:    case 5:
    #####: 1259:        golsPonderadosTime4SegTempo = pesoCinco;
    #####: 1260:        break;
        -: 1261:    case 6:
    #####: 1262:        golsPonderadosTime4SegTempo = pesoSeis;
    #####: 1263:        break;
        -: 1264:    }
    #####: 1265:    int golsTime4SegTempo = (int)(golsPonderadosTime4SegTempo * 6);
        -: 1266:
    #####: 1267:    *golsTime3 += golsTime3SegTempo;
    #####: 1268:    *golsTime4 += golsTime4SegTempo;
    #####: 1269:    printf("Fim de jogo: Time3 %d x %d Time 4 \n", *golsTime3, *golsTime4);
    #####: 1270:}
        -: 1271:
        1: 1272:int jogo(Time meuTime, Time time2)
        -: 1273:{
        -: 1274:
        1: 1275:    int golsMeuTime = 0, golstime2 = 0;
        1: 1276:    srand((unsigned int)time(NULL));
        -: 1277:
        1: 1278:    double probabilidadeMeuTime = meuTime.ataque / (6.0 * meuTime.ataque + time2.defesa);
        1: 1279:    double probabilidadetime2 = time2.ataque / (6.0 * time2.ataque + meuTime.defesa);
        -: 1280:
        1: 1281:    time_t start_time = time(NULL); // obtém o tempo de início do jogo
        -: 1282:
        1: 1283:    time_t last_attempt_time = start_time; // obtém o tempo da última tentativa de gol
        1: 1284:    printf("Inicio de jogo! Placar: Meu time %d x %d Time adversario\n", golsMeuTime, golstime2);
6049685298: 1285:    while (difftime(time(NULL), start_time) < 90.0)
        -: 1286:    { // loop de 90 minutos
        -: 1287:
        -: 1288:        // Verifica se já passaram 5 segundos desde a última tentativa de gol
6049685296: 1289:        if (difftime(time(NULL), last_attempt_time) >= 5.0)
        -: 1290:        {
       17: 1291:            last_attempt_time = time(NULL); // atualiza o tempo da última tentativa de gol
        -: 1292:
        -: 1293:            // meu time ataca
       17: 1294:            if ((double)rand() / RAND_MAX < probabilidadeMeuTime)
        -: 1295:            {
    #####: 1296:                golsMeuTime++;
        -: 1297:
    #####: 1298:                printf("Meu time marcou um gol! Placar: Meu time %d x %d Time adversario\n", golsMeuTime, golstime2);
    #####: 1299:                if (quatro_quatro_dois.atacantes[0].nome != NULL && strlen(quatro_quatro_dois.atacantes[0].nome) > 0)
        -: 1300:                {
    #####: 1301:                    chanceGol442(quatro_quatro_dois);
        -: 1302:                }
        -: 1303:
    #####: 1304:                if (quatro_tres_tres.atacantes[0].nome != NULL && strlen(quatro_tres_tres.atacantes[0].nome) > 0)
        -: 1305:                {
    #####: 1306:                    chanceGol433(quatro_tres_tres);
        -: 1307:                }
        -: 1308:
    #####: 1309:                if (tres_quatro_tres.atacantes[0].nome != NULL && strlen(tres_quatro_tres.atacantes[0].nome) > 0)
        -: 1310:                {
    #####: 1311:                    chanceGol343(tres_quatro_tres);
        -: 1312:                }
        -: 1313:
        -: 1314:                // time adversario ataca
    #####: 1315:                if ((double)rand() / RAND_MAX < probabilidadetime2)
        -: 1316:                {
    #####: 1317:                    golstime2++;
    #####: 1318:                    printf("Time adversario marcou um gol! Placar: %s %d x %d Time adversario\n", meuTime.nome, golsMeuTime, golstime2);
        -: 1319:                }
        -: 1320:            }
        -: 1321:        }
        -: 1322:    }
        1: 1323:    printf("Fim de tempo! Placar final: Meu time %d x %d Time adversario\n", golsMeuTime, golstime2);
        -: 1324:
        1: 1325:    return golsMeuTime, golstime2;
        -: 1326:}
        -: 1327:
        1: 1328:MU_TEST(test_salvarArquivo)
        -: 1329:{
        -: 1330:    // Cria um arquivo temporário com dados fictícios
        1: 1331:    FILE *arquivo = fopen("temp.txt", "wb");
        1: 1332:    if (arquivo == NULL)
        -: 1333:    {
    #####: 1334:        mu_fail("Erro ao criar arquivo temporário");
        -: 1335:        return;
        -: 1336:    }
        -: 1337:
        1: 1338:    fprintf(arquivo, "Jogador1;A;4;5;3\n");
        1: 1339:    fprintf(arquivo, "Jogador2;Z;3;4;5\n");
        1: 1340:    fclose(arquivo);
        -: 1341:
        1: 1342:    salvarArquivo("temp.txt", meuTime);
        -: 1343:
        -: 1344:    // Testa se os jogadores foram lidos corretamente
        1: 1345:    mu_assert_string_eq("Jogador1", meuTime.jogadores[0].nome);
        1: 1346:    mu_assert_string_eq("A", meuTime.jogadores[0].posicao);
        1: 1347:    mu_assert_int_eq(4, meuTime.jogadores[0].tatica);
        1: 1348:    mu_assert_int_eq(5, meuTime.jogadores[0].tecnica);
        1: 1349:    mu_assert_int_eq(3, meuTime.jogadores[0].fisico);
        -: 1350:
        1: 1351:    mu_assert_string_eq("Jogador2", meuTime.jogadores[1].nome);
        1: 1352:    mu_assert_string_eq("Z", meuTime.jogadores[1].posicao);
        1: 1353:    mu_assert_int_eq(3, meuTime.jogadores[1].tatica);
        1: 1354:    mu_assert_int_eq(4, meuTime.jogadores[1].tecnica);
        1: 1355:    mu_assert_int_eq(5, meuTime.jogadores[1].fisico);
        -: 1356:
        -: 1357:    // Remove o arquivo temporário
        1: 1358:    remove("temp.txt");
        -: 1359:}
        -: 1360:
        1: 1361:MU_TEST(test_treinamento_tecnico)
        -: 1362:{
        -: 1363:    
        -: 1364:
        1: 1365:    leArquivo("jogadores.txt");
        -: 1366:
        -: 1367:   
        1: 1368:    treinar_tecnica(&meuTime);
        -: 1369:
        -: 1370:  
        -: 1371:
        1: 1372:    mu_assert_int_eq(3, meuTime.jogadores[0].tecnica);
        -: 1373:
        1: 1374:    mu_assert_int_eq(10, meuTime.jogadores[1].tecnica);
        -: 1375:}
        1: 1376:MU_TEST(test_treinamento_tatico)
        -: 1377:{
        -: 1378:  
        -: 1379:
        1: 1380:    leArquivo("jogadores.txt");
        -: 1381:
        -: 1382:    
        1: 1383:    treinar_tatica(&meuTime);
        -: 1384:
        -: 1385:   
        -: 1386:
        1: 1387:    mu_assert_int_eq(3, meuTime.jogadores[0].tatica);
        -: 1388:
        1: 1389:    mu_assert_int_eq(4, meuTime.jogadores[1].tatica);
        -: 1390:}
        -: 1391:
        1: 1392:MU_TEST(test_treinamento_fisico)
        -: 1393:{
        -: 1394:    
        -: 1395:
        1: 1396:    leArquivo("jogadores.txt");
        -: 1397:
        1: 1398:    treinar_fisico(&meuTime);
        -: 1399:
        -: 1400:    
        1: 1401:    mu_assert_int_eq(5, meuTime.jogadores[0].fisico);
        -: 1402:
        1: 1403:    mu_assert_int_eq(5, meuTime.jogadores[1].fisico);
        -: 1404:}
        -: 1405:
        1: 1406:MU_TEST(test_escalacao_4_4_2)
        -: 1407:{ 
        -: 1408:
        -: 1409:    Time meuTime;
        -: 1410:
        1: 1411:    leArquivo("jogadores.txt");
        1: 1412:    int escolha = 1;
        -: 1413:    
        1: 1414:    escalacao(meuTime, escolha);
        -: 1415:
        1: 1416:    int numAtacantes = 0;
        1: 1417:    int numZagueiros = 0;
        1: 1418:    int numMeioCampo = 0;
        1: 1419:    int numReservas = 0;
        3: 1420:    for (int i = 0; i < 2; i++)
        -: 1421:    {
        2: 1422:        if (quatro_quatro_dois.atacantes->posicao[i] != 'A')
        -: 1423:        {
        2: 1424:            numAtacantes++;
        -: 1425:        }
        -: 1426:    }
        5: 1427:    for (int i = 0; i < 4; i++)
        -: 1428:    {
        4: 1429:        if (quatro_quatro_dois.defensores->posicao[i] != 'Z')
        -: 1430:        {
        4: 1431:            numZagueiros++;
        -: 1432:        }
        -: 1433:    }
        -: 1434:
        5: 1435:    for (int i = 0; i < 4; i++)
        -: 1436:    {
        4: 1437:        if (quatro_quatro_dois.meio_campo->posicao[i] != 'M')
        -: 1438:        {
        4: 1439:            numMeioCampo++;
        -: 1440:        }
        -: 1441:    }
        -: 1442:
        1: 1443:    mu_assert_int_eq(2, numAtacantes);
        1: 1444:    mu_assert_int_eq(4, numZagueiros);
        1: 1445:    mu_assert_int_eq(4, numMeioCampo);
        -: 1446:}
        -: 1447:
        1: 1448:MU_TEST(test_escalacao_4_3_3)
        -: 1449:{ 
        -: 1450:
        -: 1451:    Time meuTime;
        -: 1452:
        1: 1453:    leArquivo("jogadores.txt");
        1: 1454:    int escolha = 2;
        -: 1455:   
        1: 1456:    escalacao(meuTime, escolha);
        -: 1457:
        1: 1458:    int numAtacantes = 0;
        1: 1459:    int numZagueiros = 0;
        1: 1460:    int numMeioCampo = 0;
        1: 1461:    int numReservas = 0;
        4: 1462:    for (int i = 0; i < 3; i++)
        -: 1463:    {
        3: 1464:        if (quatro_tres_tres.atacantes->posicao[i] != 'A')
        -: 1465:        {
        3: 1466:            numAtacantes++;
        -: 1467:        }
        -: 1468:    }
        5: 1469:    for (int i = 0; i < 4; i++)
        -: 1470:    {
        4: 1471:        if (quatro_tres_tres.defensores->posicao[i] != 'Z')
        -: 1472:        {
        4: 1473:            numZagueiros++;
        -: 1474:        }
        -: 1475:    }
        -: 1476:
        4: 1477:    for (int i = 0; i < 3; i++)
        -: 1478:    {
        3: 1479:        if (quatro_tres_tres.meio_campo->posicao[i] != 'M')
        -: 1480:        {
        3: 1481:            numMeioCampo++;
        -: 1482:        }
        -: 1483:    }
        -: 1484:
        1: 1485:    mu_assert_int_eq(3, numAtacantes);
        1: 1486:    mu_assert_int_eq(4, numZagueiros);
        1: 1487:    mu_assert_int_eq(3, numMeioCampo);
        -: 1488:}
        -: 1489:
        1: 1490:MU_TEST(test_escalacao_3_4_3)
        -: 1491:{ 
        -: 1492:
        -: 1493:    Time meuTime;
        -: 1494:
        1: 1495:    leArquivo("jogadores.txt");
        1: 1496:    int escolha = 3;
        -: 1497:   
        1: 1498:    escalacao(meuTime, escolha);
        -: 1499:
        1: 1500:    int numAtacantes = 0;
        1: 1501:    int numZagueiros = 0;
        1: 1502:    int numMeioCampo = 0;
        1: 1503:    int numReservas = 0;
        4: 1504:    for (int i = 0; i < 3; i++)
        -: 1505:    {
        3: 1506:        if (tres_quatro_tres.atacantes->posicao[i] != 'A')
        -: 1507:        {
        3: 1508:            numAtacantes++;
        -: 1509:        }
        -: 1510:    }
        4: 1511:    for (int i = 0; i < 3; i++)
        -: 1512:    {
        3: 1513:        if (tres_quatro_tres.defensores->posicao[i] != 'Z')
        -: 1514:        {
        3: 1515:            numZagueiros++;
        -: 1516:        }
        -: 1517:    }
        -: 1518:
        5: 1519:    for (int i = 0; i < 4; i++)
        -: 1520:    {
        4: 1521:        if (tres_quatro_tres.meio_campo->posicao[i] != 'M')
        -: 1522:        {
        4: 1523:            numMeioCampo++;
        -: 1524:        }
        -: 1525:    }
        -: 1526:
        1: 1527:    mu_assert_int_eq(3, numAtacantes);
        1: 1528:    mu_assert_int_eq(3, numZagueiros);
        1: 1529:    mu_assert_int_eq(4, numMeioCampo);
        -: 1530:}
        -: 1531:
        1: 1532:MU_TEST(test_jogo)
        -: 1533:{
        -: 1534:
        -: 1535:    Time timeAdversario;
        1: 1536:    leArquivo("jogadores.txt");
        1: 1537:    int escolha = 1;
        1: 1538:    escalacao(meuTime, escolha);
        1: 1539:    int resultado = jogo(meuTime, time2);
        -: 1540:
        -: 1541:   
        1: 1542:    mu_assert(resultado >= 0, "Erro: resultado inválido.");
        -: 1543:}
        -: 1544:
        1: 1545:MU_TEST(test_jogo2)
        -: 1546:{
        -: 1547:
        1: 1548:    Time time3 = {"Jonmas", 120.0, 130.2, {}};
        1: 1549:    Time time4 = {"JUNZA", 120.0, 130.2, {}};
        1: 1550:    leArquivo("jogadores.txt");
        1: 1551:    int escolha = 1;
        -: 1552:
        1: 1553:    int resultado = jogo2pt1(time3, time4);
        -: 1554:
        -: 1555:    
        1: 1556:    mu_assert(resultado >= 0, "Erro: resultado inválido.");
        -: 1557:}
        -: 1558:
        1: 1559:MU_TEST(test_CalcularMedias)
        -: 1560:{
        -: 1561:
        1: 1562:    leArquivo("jogadores.txt");
        1: 1563:    calcular_medias(meuTime.jogadores, 25, &meuTime);
        -: 1564:
        1: 1565:    mu_assert_int_eq(121.0, meuTime.defesa);
        1: 1566:    mu_assert_int_eq(125.0, meuTime.ataque);
        -: 1567:}
        -: 1568:
        -: 1569:
        1: 1570:MU_TEST_SUITE(test_suite)
        -: 1571:{
        1: 1572:    MU_RUN_TEST(test_leArquivo);
        1: 1573:    MU_RUN_TEST(test_salvarArquivo);
        1: 1574:    MU_RUN_TEST(test_treinamento_tecnico);
        1: 1575:    MU_RUN_TEST(test_treinamento_fisico);
        1: 1576:    MU_RUN_TEST(test_treinamento_tatico);
        1: 1577:    MU_RUN_TEST(test_escalacao_4_4_2);
        1: 1578:    MU_RUN_TEST(test_escalacao_4_3_3);
        1: 1579:    MU_RUN_TEST(test_escalacao_3_4_3);
        1: 1580:    MU_RUN_TEST(test_jogo);
        1: 1581:    MU_RUN_TEST(test_jogo2);
        1: 1582:    MU_RUN_TEST(test_CalcularMedias);
        1: 1583:}
        -: 1584:
        1: 1585:int main()
        -: 1586:{
        1: 1587:    MU_RUN_SUITE(test_suite);
        1: 1588:    MU_REPORT();
        1: 1589:    return MU_EXIT_CODE;
        -: 1590:}
